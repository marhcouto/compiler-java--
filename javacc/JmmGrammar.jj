PARSER_PACKAGE=pt.up.fe.comp;
PARSER_CLASS=JmmGrammarParser;
SMART_NODE_CREATION=false;
TOKENS_ARE_NODES=false;

SKIP : " " | "\t" | "\r" | "\n" | <LINE_COMMENT:"//" (~["\n","\r"])*> | <BLOCK_COMMENT: "/*" (~["*"])* "*" (~["*","/"] (~["*"])* "*" | "*")* "/">;

TOKEN :
	< PLUS : "+" > |
	< MINUS : "-" > |
	< TIMES : "*" > |
	< DIVIDE : "/" > |
	< ASSIGNMENT : "="> |
	< AND : "&&" > |
	< LT : "<" > |
	< EQUALS : "==" > | 
	< OPEN_PAREN : "(" > |
	< CLOSE_PAREN : ")" > |
	< INTEGER_LITERAL : (["0" - "9"])+ > |
	< OPEN_RECT_PAREN : "[" > |
	< CLOSE_RECT_PAREN : "]" > |
	< OPEN_BRACKET : "{" > |
	< CLOSE_BRACKET : "}" > |
	< IF : "if" > |
	< ELSE : "else" > |
	< WHILE : "while" > |
	< TRUE_TOKEN : "true" > |
	< FALSE_TOKEN : "false" > |
	< THIS_TOKEN : "this" > |
	< NEW : "new" > |
	< INT : "int" > | 
	< BOOLEAN : "boolean" > |
	< STRING : "String" > | 
	< MAIN : "main" > |
	< RETURN : "return" > |
	< EOE : ";" > |
	< COMMA : "," > |
	< NOT : "!"> |
	< DOT : "." > |
	< LENGTH_TOKEN : "length"> |
	< CLASS : "class" > |
	< EXTENDS : "extends" > |
	< PUBLIC : "public" > |
	< STATIC : "static" > |
	< VOID : "void" > |
	< IMPORT : "import" > |
	< ID : (("_" | ["A" - "Z"] | ["a" - "z"])("_" | ["0" - "9"] | ["A" - "Z"] | ["a" - "z"])*) >
;


// PRE-CLASS
Start: ImportDeclarations ClassDeclaration <EOF>;

ImportDeclarations #void: (ImportDeclaration)*;

ImportDeclaration: <IMPORT> ((<ID> { jjtThis.put("image", lastConsumedToken.getImage()); }) #ImportPath) (
    <DOT> (<ID> { jjtThis.put("image", lastConsumedToken.getImage()); }) #ImportPath
)* <EOE>;


// CLASS
ClassDeclaration: <CLASS> ((<ID> { jjtThis.put("image", lastConsumedToken.getImage()); }) #ClassName) (<EXTENDS> (<ID> { jjtThis.put("image", lastConsumedToken.getImage()); }) #ClassParent)? <OPEN_BRACKET>
    (
        VarDeclaration |
        GeneralMethodDeclaration
    )*
<CLOSE_BRACKET>;


// METHODS
GeneralMethodDeclaration #void: (<PUBLIC> (MethodDeclaration | MainMethodDeclaration));

MainMethodDeclaration: (<STATIC> <VOID> <MAIN>  <OPEN_PAREN> <STRING> <OPEN_RECT_PAREN> <CLOSE_RECT_PAREN> (<ID> { jjtThis.put("image", lastConsumedToken.getImage()); }) #MainArgsName <CLOSE_PAREN>)
    <OPEN_BRACKET>
        MethodBody
    <CLOSE_BRACKET>
;

MethodDeclaration: (Type MethodName <OPEN_PAREN>
        MethodArgsList
    <CLOSE_PAREN>)
    <OPEN_BRACKET>
            MethodBody
            ReturnStatement
    <CLOSE_BRACKET>
;

MethodBody: (
        (SCAN 2 VarDeclaration |
        Statement)
)*;

MethodName: <ID> { jjtThis.put("image", lastConsumedToken.getImage()); };

ReturnStatement: <RETURN> Expression <EOE>;


// VARIABLE DECLARATIONS AND ARGUMENTS
MethodArgsList: (Variable (<COMMA> Variable)*)?;

Variable: Type VarName;

VarDeclaration #void: Variable <EOE>;

VarName: <ID> { jjtThis.put("image", lastConsumedToken.getImage()); };

Type: (<INT> (<OPEN_RECT_PAREN> <CLOSE_RECT_PAREN> { jjtThis.put("arr", "true"); })? { jjtThis.put("image", "int"); }) |
    (<BOOLEAN> { jjtThis.put("image", "boolean"); }) |
    (<STRING> { jjtThis.put("image", "String"); }) |
    (<ID> { jjtThis.put("image", lastConsumedToken.getImage()); })
;


// STATEMENTS
Statement #void: (<OPEN_BRACKET> (Statement)* <CLOSE_BRACKET>) |
    (<IF> <OPEN_PAREN>Expression<CLOSE_PAREN> LoopBody <ELSE> LoopBody) #IfStm(3) |
    (<WHILE> <OPEN_PAREN>Expression<CLOSE_PAREN> LoopBody) #WhileStm(2) |
    IDStatement <EOE>;

LoopBody: Statement;

IDStatement #void:  ((ArrOrVar) (AssignmentStatement | DotExpressionCalls)) | (Expression); // Statements starting with an ID

AssignmentStatement #void: (<ASSIGNMENT> Expression) #AsmOp(2);


// EXPRESSIONS
Expression #void: AndExpression;

AndExpression #void: LessThanExpression (
    (<AND> LessThanExpression { jjtThis.put("op", "AND"); }) #BinOp(2)
)*;

LessThanExpression #void: AdditiveExpression (
    (<LT> AdditiveExpression { jjtThis.put("op", "LT"); }) #BinOp(2)
)*;

AdditiveExpression #void: MultiplicativeExpression (
    (<PLUS> MultiplicativeExpression { jjtThis.put("op", "ADD"); }) #BinOp(2) |
    (<MINUS> MultiplicativeExpression { jjtThis.put("op", "SUB"); } ) #BinOp(2)
)*;

MultiplicativeExpression #void: UnaryOperator (
    (<TIMES> UnaryOperator { jjtThis.put("op", "MUL"); }) #BinOp(2) |
    (<DIVIDE> UnaryOperator { jjtThis.put("op", "DIV"); }) #BinOp(2)
)*;

UnaryOperatorPrefix #void: (<INTEGER_LITERAL> { jjtThis.put("image", lastConsumedToken.getImage()); }) #IntegerLiteral  |
    <TRUE_TOKEN> #True |
    <FALSE_TOKEN> #False |
    <THIS_TOKEN> #This |
    (<NEW> CreatedObject) |
    (<NOT> Expression { jjtThis.put("op", "NOT"); } ) #UnaryOp |
    <OPEN_PAREN>Expression<CLOSE_PAREN> |
    (<MINUS> Expression { jjtThis.put("op", "SIM"); }) #UnaryOp |
    ArrOrVar;

UnaryOperator #void: UnaryOperatorPrefix DotExpressionCalls;

CreatedObject #void: (<INT> <OPEN_RECT_PAREN>Expression<CLOSE_RECT_PAREN>) #CreateArrObj(1) |
    ((<ID> { jjtThis.put("image", lastConsumedToken.getImage()); }) #ObjName <OPEN_PAREN> <CLOSE_PAREN>) #CreateObj
;

ArrOrVar #void: ((<ID> { jjtThis.put("image", lastConsumedToken.getImage()); }) #VarName ) ((<OPEN_RECT_PAREN> Expression <CLOSE_RECT_PAREN>) #ArrAccess(2))?;

// FUNCTION CALLS
DotExpressionCalls #void: (<DOT> ExpressionCall)*;

ExpressionCall #void: (<LENGTH_TOKEN> #Length(1)) | (FnCall #FnCallOp(3));

FnCall #void: ((<ID> { jjtThis.put("image", lastConsumedToken.getImage()); }) #MethodName <OPEN_PAREN>)
    ArgumentList
<CLOSE_PAREN>
;

ArgumentList: (Expression (<COMMA> Expression)*)?;


// NODE INJECTIONS
// Injections for the implementation of JmmNode
// Since this is injected into BaseNode, it affects only non-terminals
INJECT BaseNode :
		import pt.up.fe.comp.jmm.ast.JmmNode;
		import pt.up.fe.comp.jmm.ast.AJmmNode;
		import pt.up.fe.specs.util.SpecsCollections;
		extends AJmmNode
{
    @Override
    public List<JmmNode> getChildren() {

        return SpecsCollections.cast(children(), JmmNode.class);
    }

    @Override
    public void add(JmmNode child, int index) {

        if (child instanceof Node) {

            addChild(index, (Node) child);
        } else {

            throw new RuntimeException("Node " + child + " is not a Node.");
        }

    }
}
